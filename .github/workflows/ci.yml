name: CI/CD
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
         
      - uses: actions/cache@v3
        with:
          path: |
            venv
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          playwright install --with-deps
          
      - name: Create test directories
        run: |
          mkdir -p tests/unit
          mkdir -p tests/integration  
          mkdir -p tests/e2e
          mkdir -p tests/playwright
          mkdir -p test-results
          
      - name: Run tests
        run: |
          source venv/bin/activate
          # Run unit tests if they exist
          if [ -d "tests/unit" ] && [ "$(ls -A tests/unit)" ]; then
            pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml
          fi
          # Run integration tests if they exist  
          if [ -d "tests/integration" ] && [ "$(ls -A tests/integration)" ]; then
            pytest tests/integration/
          fi
          # Run e2e tests if they exist
          if [ -d "tests/e2e" ] && [ "$(ls -A tests/e2e)" ]; then
            pytest tests/e2e/
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
     
      - name: Build image
        run: docker build -t app:test .
     
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
  deploy:
    needs: security
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
     
      - uses: docker/setup-buildx-action@v3
     
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
         
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            jonathancapalbo1/assignment8:latest
            jonathancapalbo1/assignment8:601_module8-${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=jonathancapalbo1/assignment8:cache
          cache-to: type=inline,mode=max